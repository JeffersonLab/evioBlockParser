# 
#  EVENT readout list
#    Example of a Secondary readout list responsible for 
#    getting data from the primary readout list and then
#    passing it to the Output queue.
#
#    David Abbott, CEBAF 1996

readout list ROL2
maximum 20480,100
polling
event readout

include "simpleLib.h"

%%
static DANODE *input_block__, *input_index__;
static unsigned int *blockData;
%%

begin download

  log inform "User Download 2 Executed"

%%
{
  int debugFlags = 0;
  simpleInit();

  simpleConfigIgnoreUndefinedBlocks(1);

  simpleConfigModule(MODID_TI, 4, NULL,NULL);
  simpleConfigModule(MODID_FA250,3, NULL,NULL);

  debugFlags = 
/*     SIMPLE_SHOW_BLOCK_HEADER | */
/*     SIMPLE_SHOW_BLOCK_TRAILER | */
/*     SIMPLE_SHOW_EVENT_HEADER | */
/*     SIMPLE_SHOW_EVENT_TIMESTAMP | */
/*     SIMPLE_SHOW_BANK_FOUND | */
/*     SIMPLE_SHOW_SECOND_PASS | */
    SIMPLE_SHOW_IGNORED_BANKS |
    0;

/*   debugFlags = 0; */

  simpleConfigSetDebug(debugFlags);

}
%%

end download
    
begin prestart

  variable jj, adc_id

  log inform "Entering User Prestart 2"

  init trig source EVENT
  link sync trig source EVENT 1 to davetrig and davetrig_done
  event type 1 then read EVENT 1

  rol->poll = 1;

%%
partGetItem(rol->pool, input_block__);
blockData = (unsigned int *)&input_block__->data[0];

printf("blockData  = 0x%08x\n",(unsigned int)&blockData);
%%

  log inform "User Prestart 2 executed"

end prestart

begin end

%%
{

}
%%
  log inform "User End 2 Executed"

end end

begin pause

  log inform "User Pause 2 Executed"

end pause

begin go
  
  log inform "Entering User Go 2"
%%
{

} 
%% 
end go

begin trigger davetrig

int ii;

#copy event
get event
    
%%
{
  static int evnum=1;
  static int blocknum=1;
  unsigned int *StartOfTrigEvent;
  int data_event=0, blocklevel=0;
  static int event_of_block=0;;
  static int len=0;
  int iword=0;
  int nwords=0;
  int it=0;

#ifdef DEBUG1
 for(iword=-2; iword<rol->dabufpi[0]; iword++)
   printf(" data[%d] = %08x\n",iword,rol->dabufpi[iword]);
#endif

 if((rol->dabufpi[-1] & 0xFF000000)!=0xFE000000)
   {
     data_event=1;
     event_of_block=0;
   }
 else
   {
     data_event=0;
     event_of_block++;
   }

 if(data_event==1)
   {
#ifdef DEBUG2
     printf("Data Event\n");
#endif
     blockData = (unsigned int *)&input_block__->data[0];
     simpleUnblock(rol->dabufpi,blockData,0);

#ifdef DEBUG2
     printf("%s: Unblocked?\n",__FUNCTION__);
     blockData = (unsigned int *)&input_block__->data[0];
     for(iword=0; iword<15; iword++)
       {
	 printf("[%3d] = 0x%08x\n",iword,blockData[iword]);
       }
#endif
   }
#ifdef DEBUG2
 else
   {
     printf("Not a data event   0x%08x\n",rol->dabufpi[-1]);
   }
#endif

 EVENT_GET;
 nwords = simpleFillEvent(rol->dabufp, input_block__->data);
 if(nwords==0)
   {
     if (rol->dabufp != NULL) { /* Output Pointer should be set by CODA 2.1 ROC */

       /* Copy event, including Header from Input to Output */
       for (iword=-2;iword<EVENT_LENGTH;iword++)
	 {
	   *rol->dabufp++ = INPUT[iword];
	 }
     }else{
       printf("ROL2: ERROR rol->dabufp is NULL -- Event lost\n");
     }
   }
 else
   {
#ifdef DEBUG3
     for(iword=0; iword<nwords; iword++)
       printf("%5d: 0x%08x \n",iword,rol->dabufp[iword]);
     printf("%d:   nwords = %d\n",event_of_block,nwords);
     printf(" list.c = %d\n",rol->input->list.c);
#endif
     rol->dabufp += nwords;
   }
}
%%

end trigger

begin done davetrig


end done

begin done

end done

begin status

end status


