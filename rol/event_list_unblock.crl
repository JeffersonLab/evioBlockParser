# 
#  EVENT readout list
#    Example of a Secondary readout list responsible for 
#    getting data from the primary readout list and then
#    passing it to the Output queue.
#
#    David Abbott, CEBAF 1996

readout list ROL2
maximum 20480,100
polling
event readout

%%
#define newCEOPEN(bnum, btype, enum) {		 \
  StartOfTrigEvent = (blockData); \
  *(++(blockData)) = (syncFlag<<24) | ((bnum) << 16) | ((btype##_ty) << 8) | (0xff & evnum);	\
   ((blockData))++;}


#define newCECLOSE {							\
    *StartOfTrigEvent = (long) (((char *) (blockData)) - ((char *) StartOfTrigEvent)); \
    if ((*StartOfTrigEvent & 1) != 0) {			\
      (blockData) = ((long *)((char *) (blockData))+1);		\
      *StartOfTrigEvent += 1;				\
    };									\
    if ((*StartOfTrigEvent & 2) !=0) {			\
      *StartOfTrigEvent = *StartOfTrigEvent + 2;	\
      (blockData) = ((long *)((short *) (blockData))+1);;		\
    };									\
    *StartOfTrigEvent = ( (*StartOfTrigEvent) >> 2) - 1;};

static DANODE *input_block__, *input_index__;
static unsigned int *blockData;
static int *eventIndex;
%%

begin download

  log inform "User Download 2 Executed"

end download
    
begin prestart

  variable jj, adc_id

  log inform "Entering User Prestart 2"

  init trig source EVENT
  link sync trig source EVENT 1 to davetrig and davetrig_done
  event type 1 then read EVENT 1

  rol->poll = 1;

%%
partGetItem(rol->pool, input_block__);
blockData = (unsigned int *)&input_block__->data[0];
partGetItem(rol->pool, input_index__);
eventIndex = (int *)&input_index__->data[0];

printf("blockData  = 0x%08x\n",(unsigned int)&blockData);
printf("eventIndex = 0x%08x\n",(unsigned int)&eventIndex);
%%

  log inform "User Prestart 2 executed"

end prestart

begin end

  log inform "User End 2 Executed"

end end

begin pause

  log inform "User Pause 2 Executed"

end pause

begin go
  
  log inform "Entering User Go 2"
  
end go

begin trigger davetrig

int ii;

#copy event
get event
    
%%
static int evnum=1;
static int blocknum=1;
unsigned int *StartOfTrigEvent;
int data_event=0, blocklevel=0;
static int event_of_block=0;;
static int len=0;
int iword=0;

for(iword=-2; iword<rol->dabufpi[0]; iword++)
  printf(" data[%d] = %x\n",iword,rol->dabufpi[iword]);

if((rol->dabufpi[-1] & 0xff000000)!=0xFE000000)
  {
    data_event=1;
    event_of_block=0;
  }
 else
   {
     data_event=0;
     event_of_block++;
   }

if(data_event==1)
  {
    blockData = (unsigned int *)&input_block__->data[0];
    newCEOPEN(1,BT_UI4,evnum);
    *blockData++ = 0x12345678;
    *blockData++ = evnum;
    *blockData++ = blocknum;
    *blockData++ = 0x87654321;
    newCECLOSE;
    /*     printf(" 0x%08x    0x%08x\n",StartOfTrigEvent, &input_block__->data[0]); */
    /*     printf("0x%08x\n", input_block__->data[0]); */
    eventIndex[0] = ((unsigned int)StartOfTrigEvent - (unsigned int)&input_block__->data[0])>>2;
    /*     printf(" eventIndex[0] = %d\n",eventIndex[0]); */
    evnum++;
    
    newCEOPEN(2,BT_UI4,evnum);
    *blockData++ = 0x87654321;
    *blockData++ = evnum;
    *blockData++ = blocknum;
    *blockData++ = 0x12345678;
    newCECLOSE;
    /*     printf(" 0x%08x    0x%08x\n",StartOfTrigEvent, &input_block__->data[0]); */
    /*     printf("0x%08x\n", input_block__->data[0]); */
    eventIndex[1] = ((unsigned int)StartOfTrigEvent - (unsigned int)&input_block__->data[0])>>2;
    /*     printf(" eventIndex[1] = %d\n",eventIndex[1]); */
    evnum++;

    newCEOPEN(3,BT_UI4,evnum);
    *blockData++ = 0x11112222;
    *blockData++ = evnum;
    *blockData++ = blocknum;
    *blockData++ = 0x99998888;
    newCECLOSE;
    /*     printf(" 0x%08x    0x%08x\n",StartOfTrigEvent, &input_block__->data[0]); */
    /*     printf("0x%08x\n", input_block__->data[0]); */
    eventIndex[2] = ((unsigned int)StartOfTrigEvent - (unsigned int)&input_block__->data[0])>>2;
    /*     printf(" eventIndex[1] = %d\n",eventIndex[1]); */
    evnum++;
    blocknum++;
  }

EVENT_GET;
blockData = (unsigned int *)&input_block__->data[0];
len = blockData[eventIndex[event_of_block]]+1;
printf("%d: len = %d\n", event_of_block, len);
for(iword=0; iword<len; iword++)
  {
    *rol->dabufp++ = blockData[eventIndex[event_of_block]+iword];
  }



%%

end trigger

begin done davetrig


end done

begin done

end done

begin status

end status


